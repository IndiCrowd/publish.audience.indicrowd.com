<?xml version="1.0" encoding="utf-8"?>
<s:Application xmlns:fx="http://ns.adobe.com/mxml/2009"
			   xmlns:s="library://ns.adobe.com/flex/spark"
			   xmlns:mx="library://ns.adobe.com/flex/mx"
			   width="280" height="150" minWidth="280" minHeight="140" initialize="init()">
	<fx:Script>
		<![CDATA[
			import mx.core.FlexGlobals;
			import mx.rpc.events.ResultEvent;
			
			import org.osmf.events.MediaPlayerStateChangeEvent;
			import org.osmf.media.*;
			
			[Bindable]
			private var itemURL:String = "/test/item.json";
			[Bindable]
			private var serverInfoURL:String = "/server/optimal";
			private var urlPrefix:String = "/IndiCrowd";
			private var clientHaveCamera:Boolean = false;
			private var clientUseCamera:Boolean = false;
			private var clientWidth:int = 100;
			private var clientHeight:int = 100;
			private var clientFPS:int = 3;
			private var clientPublishAddr:String;
			private var clientPublishConn:NetConnection;
			[Bindable]
			private var clientPublishStr:String;
			[Bindable]
			private var clientDefaultImage:String;
			private var clientPublishStream:NetStream;
			
			
			private var camera:Camera;
			private var microphone:Microphone;
			
			private var videoEventsDisabled:Boolean = false;
			
			
			public function setClientPublishStr(substr:String):void
			{
				clientPublishStr = substr;
			}
			
			public function setClientDefaultImage(img:String):void
			{
				clientDefaultImage = img;	
			}
			
			
			private function init():void
			{
				startNetwork();
					
				clientPublishStr =  FlexGlobals.topLevelApplication.parameters.clientPublishStr;
				clientDefaultImage =  FlexGlobals.topLevelApplication.parameters.clientDefaultImage;
				urlPrefix =  FlexGlobals.topLevelApplication.parameters.urlPrefix;
				itemURL = urlPrefix + itemURL;
				serverInfoURL = urlPrefix + serverInfoURL;
				
				videoPubDefaultImage.source = clientDefaultImage;
				
				// Callback 함수 등록
				flash.external.ExternalInterface.addCallback("setClientPublishStr", setClientPublishStr);
				flash.external.ExternalInterface.addCallback("setClientDefaultImage", setClientDefaultImage);
				
				itemService.send();
				serverInfoService.send();
			}
			
			
			private function readItems(event:ResultEvent):void
			{
				itemContainer.removeAllElements();
				
				var result:Object = JSON.parse(event.result as String);
				var item:Object;
				
				for each (item in result.list)
				{
					addItemAtGroup(item);
				}
			}
			
			private function readServerInfo(event:ResultEvent):void
			{
				var result:Object = JSON.parse(event.result as String);
				
				clientPublishAddr = "rtmp://" + result.command.hostname + ":" + result.command.rtmpPort + "/live_user";
			}
			
			private function addItemAtGroup(item:Object):void
			{
				var imageComponent:Image = new Image();
				imageComponent.addEventListener(MouseEvent.CLICK, function(event:MouseEvent):void {
					flash.external.ExternalInterface.call("useItem", item.requestName);
				imageComponent.source = item.imageLocation;
				imageComponent.width = 40;
				imageComponent.height = 40;
				imageComponent.toolTip = item.name;
				});
				
				itemContainer.addElement(imageComponent);
			}
			
			
			private function ncOnStatus(infoObject:NetStatusEvent):void
			{
				trace("nc: "+infoObject.info.code+" ("+infoObject.info.description+")");
				
				if (infoObject.info.code == "NetConnection.Connect.Failed")
				{
					// 접속 실패
				} else if (infoObject.info.code == "NetConnection.Connect.Rejected") {
					// 연결 거부
				} else if (infoObject.info.code == "NetConnection.Connect.Success") {
					
				}
			}
			
			private function startNetwork():void
			{	
				clientPublishConn = new NetConnection();
				clientPublishConn.connect(clientPublishAddr);
				
				// get status information from the NetConnection object
				clientPublishConn.addEventListener(NetStatusEvent.NET_STATUS, ncOnStatus);
			}
			
			private function changeCamPubState(publish:Boolean):void
			{
				if (publish)
				{
					camera = Camera.getCamera();
					
					// if this system don't have camera, don't publishing 
					if (camera == null)
						return ;
					
					camera.setMode(clientWidth, clientHeight, clientFPS, false);
					camera.setQuality(0, 80);
					camera.setKeyFrameInterval(30);
					
					clientPublishStream = new NetStream(clientPublishConn);
					// set the buffer time to zero since it is chat
					clientPublishStream.bufferTime = 0;
					
					clientPublishStream.publish(clientPublishStr);
					
					userVideo.attachCamera(camera);
					clientPublishStream.attachCamera(camera);
					videoPubDefaultImage.visible = false;
					
					flash.external.ExternalInterface.call("userCamState", true);
				} else  {
					flash.external.ExternalInterface.call("userCamState", false);
					videoPubDefaultImage.visible = true;
					
					clientPublishStream.close();
					clientPublishStream = null;
					userVideo.attachCamera(null);
					
				}
			}
			
			protected function userVideo_clickHandler(event:MouseEvent):void
			{
				clientUseCamera = !clientUseCamera;
				
				if (clientUseCamera)
					lblCliCamPubState.text = "Live";
				else
					lblCliCamPubState.text = "";
				
				changeCamPubState(clientUseCamera);
				
			}
			
			
		]]>
	</fx:Script>
	<fx:Declarations>
		<!-- Place non-visual elements (e.g., services, value objects) here -->
		<mx:HTTPService id="itemService" url="{itemURL}" useProxy="false" method="GET" result="readItems(event)" showBusyCursor="true">
			<mx:request xmlns="">
			</mx:request>
		</mx:HTTPService>
		<mx:HTTPService id="serverInfoService" url="{serverInfoURL}" useProxy="false" method="GET" result="readServerInfo(event)" showBusyCursor="true">
			<mx:request xmlns="">
			</mx:request>
		</mx:HTTPService>
	</fx:Declarations>
	
	<mx:VideoDisplay id="userVideo" x="10" y="10" width="100" height="100"
					 click="userVideo_clickHandler(event)"/>
	<s:Label id="lblCliCamPubState" x="10" y="10"/>
	<s:Image id="videoPubDefaultImage" x="10" y="10" width="100" height="100"
			 click="userVideo_clickHandler(event)" />
	<s:TileGroup id="itemContainer" x="118" y="10" width="152" height="130" orientation="rows">
	</s:TileGroup>
	<s:Label x="10" y="118" width="100" text="이름"/>
	
</s:Application>
